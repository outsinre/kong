# 1. runs-on
# 2. CE EE
# 3. Check comments
# 4. remove unnecessary echo, git status, etc.

name: Add New Release to Pongo

on:
  # 'releasea event will trigger a 'push' event at the same time
  # so we use the 'push' event in production, and the 'release'
  # for test purpose.
  release:
    types: [prereleased]
  # push:
  #   tags:
  #   - '[1-9]+.[0-9]+.[0-9]+'         # CE
  #   - '[1-9]+.[0-9]+.[0-9]+.[0-9]+'  # EE

jobs:
  set_vars:
    name: Set Vars
    runs-on: ubuntu-latest
    outputs:
      ce_ee: ${{ steps.define_vars.outputs.CE_EE }}
      tag_version: ${{ steps.define_vars.outputs.TAG_VERSION }}
      pr_branch: ${{ steps.define_vars.outputs.PR_BRANCH }}
    steps:
    - name: Define Vars
      id: define_vars
      shell: bash
      run: |
        # change outsinre to kong
        if [[ "${GITHUB_REPOSITORY}" = "outsinre/kong" ]] ; then
          CE_EE=CE
        elif [[ "${GITHUB_REPOSITORY}" = "outsinre/kong-ee" ]] ; then
          CE_EE=EE
        fi
        echo "CE_EE=$CE_EE" >> "$GITHUB_OUTPUT"

        echo "GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
        echo "CE_EE = $CE_EE"
        echo "github.event.name = ${{ github.event_name }}"
        echo "github.ref = ${{ github.ref }}"
        echo "github.ref_name = ${{ github.ref_name }}"
        echo "github.event.release.tag_name = ${{ github.event.release.tag_name }}"

        if [[ "${{ github.event_name }}" == "push" ]] ; then
          TAG_VERSION="${{ github.ref_name }}"
        elif [[ "${{ github.event_name }}" == "release" ]] ; then
          TAG_VERSION="${{ github.event.release.tag_name }}"
        fi
        echo "TAG_VERSION=$TAG_VERSION" >> "$GITHUB_OUTPUT"

        echo "TAG_VERSION = $TAG_VERSION"

        echo "PR_BRANCH=add-${CE_EE,,}-version-${TAG_VERSION}" >> "$GITHUB_OUTPUT"
  add_release_to_pongo:
    name: Add Release to Pongo
    runs-on: ubuntu-latest
    needs:
    - set_vars
    env:
      # Required clone 'kong/kong' or 'kong/kong-ee' or push PR to 'kong/kong-pongo'
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
    - name: Checkout Pongo
      id: checkout_pongo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}
        repository: kong/kong-pongo
        ref: master
    - name: Update Versions File
      id: update_versions_file
      shell: bash
      run: |
        ls "$PWD" ; git status

        git config --global user.email "gha-bot@konghq.com"
        git config --global user.name "GHA Bot"
        git config --global --list

        git checkout -b "${{ needs.set_vars.outputs.pr_branch }}"
        git status

        ce_ee="${{ needs.set_vars.outputs.ce_ee }}"
        VERSIONS_FILE="assets/kong_${ce_ee}_versions.ver"
        if [[ ! -f $VERSIONS_FILE ]]; then
          echo "Versions file '$VERSIONS_FILE' not found"
          exit 1
        fi
        tag_version="${{ needs.set_vars.outputs.tag_version }}"
        echo "${tag_version}" >> "$VERSIONS_FILE"
        sort --version-sort -o "$VERSIONS_FILE" "$VERSIONS_FILE"
        git diff
        git add "$VERSIONS_FILE"
        git commit -m "feat(version): add Kong ${ce_ee} version $tag_version"
        git status
    - name: Checkout Kong ${{ needs.set_vars.outputs.ce_ee }}
      id: checkout_kong
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}
        ref: ${{ needs.set_vars.outputs.tag_version }}
        path: ${{ github.event.repository.name }}
    - name: Update Artifacts
      id: update_artifacts
      shell: bash
      run: |
        repo_name=${{ github.event.repository.name }}
        tag_version="${{ needs.set_vars.outputs.tag_version }}"

        ls -lrta "$PWD"
        cd $repo_name
        ls "$PWD"
        git status
        cd ..

        mkdir -p "kong-versions/${tag_version}/kong"
        cp    "${repo_name}/Makefile" "kong-versions/${tag_version}/kong/"
        cp -R "${repo_name}/bin"      "kong-versions/${tag_version}/kong/"

        mkdir -p "kong-versions/${tag_version}/kong/spec"
        for fname in ${repo_name}/spec/* ; do
          case $fname in
            (${repo_name}/spec/[0-9]*)
              # skip test files
              ;;
            (*)
              cp -R "$fname" "kong-versions/${tag_version}/kong/spec/"
              ;;
          esac
        done

        if [[ -d "${repo_name}/spec-ee" ]] ; then
          mkdir -p "kong-versions/${tag_version}/kong/spec-ee"
          for fname in ${repo_name}/spec-ee/* ; do
            case $fname in
              (${repo_name}/spec-ee/[0-9]*)
                # skip test files
                ;;
              (*)
                cp -R "$fname" "kong-versions/${tag_version}/kong/spec-ee/"
                ;;
            esac
          done
        fi

        rm -rf "${repo_name}"

        git status

        git add kong-versions/
        git commit -m "chore(version): add Kong "${{ needs.set_vars.outputs.ce_ee }}" version $tag_version artifacts"

        git status

        git push -u origin ${{ needs.set_vars.outputs.pr_branch }}
    - name: Create PR
      id: create_pr
      shell: bash
      run: |
        gh pr create -B master -H "${{ needs.set_vars.outputs.pr_branch }}" --title "Add Kong "${{ needs.set_vars.outputs.ce_ee }}" version ${{ needs.set_vars.outputs.tag_version }}" --body 'Created by GHA Bot.'
